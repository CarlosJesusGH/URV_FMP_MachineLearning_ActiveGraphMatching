function [average_hamming,average_runtime] = hammingDatabase(databaseName)
    
% This function measures the average hamming distance (dissimilarity of mappings)
% between the ground truth correspondence and a correspondence generated by
% the Bipartite algorithm (using the degree centrality) for all registers of the
% Test set. It also measures the average runtime for each correspondence
% generation and comparison

%     addpath('Utils');
    addpath(databaseName);
    load(strcat(databaseName,'.mat'));
    
    errors = [];
    number_of_test=0;
    total_runtime=0;
    
    for i = 1:length(Database.Test)
        currentElem = Database.Test{i};
        G1 = currentElem.Graph;
        for j = 1:length(currentElem.Correspondences)
            if (j ~= i)
                G2 = Database.Test{currentElem.Correspondences{j}.InputGraph}.Graph;
                idealMapping = currentElem.Correspondences{j}.Mappings;

                switch databaseName
                    case 'LETTERLOW'
                        NA = G1.Nodes;
                        NB = G2.Nodes;
                        EA = G1.Edges;
                        EB = G2.Edges;

                        KV = 1;
                        KE = 1;
                        
                        tic
                        [~,automaticMapping] = BP_Degree_Centrality_h(NA,NB,EA,EB,KV,KE);
                        errors(end + 1) = 1-(length(find(automaticMapping - idealMapping) ~= 0) / length(automaticMapping));
                        runtime=toc;
                        runtime
                        total_runtime=total_runtime+runtime;
                        number_of_test=number_of_test+1;
                        number_of_test
                        
                    case 'LETTERMED'
                        NA = G1.Nodes;
                        NB = G2.Nodes;
                        EA = G1.Edges;
                        EB = G2.Edges;

                        KV = 1;
                        KE = 1;
                        
                        tic
                        [~,automaticMapping] = BP_Degree_Centrality_h(NA,NB,EA,EB,KV,KE);
                        errors(end + 1) = 1-(length(find(automaticMapping - idealMapping) ~= 0) / length(automaticMapping));
                        runtime=toc;
                        runtime
                        total_runtime=total_runtime+runtime;
                        number_of_test=number_of_test+1;
                        number_of_test
                        
                    case 'LETTERHIGH'
                        NA = G1.Nodes;
                        NB = G2.Nodes;
                        EA = G1.Edges;
                        EB = G2.Edges;

                        KV = 1;
                        KE = 1;

                        tic
                        [~,automaticMapping] = BP_Degree_Centrality_h(NA,NB,EA,EB,KV,KE);
                        errors(end + 1) = 1-(length(find(automaticMapping - idealMapping) ~= 0) / length(automaticMapping));
                        runtime=toc;
                        runtime
                        total_runtime=total_runtime+runtime;
                        number_of_test=number_of_test+1;
                        number_of_test
                        
                    case 'HOUSEHOTEL'
                        NA = G1.Nodes(:,3:62);
                        NB = G2.Nodes(:,3:62);
                        EA = G1.Edges;
                        EB = G2.Edges;

                        KV = 100000;
                        KE = 1;

                        tic
                        [~,automaticMapping] = BP_Degree_Centrality_h(NA,NB,EA,EB,KV,KE);
                        errors(end + 1) = 1-(length(find(automaticMapping - idealMapping) ~= 0) / length(automaticMapping));
                        runtime=toc;
                        runtime
                        total_runtime=total_runtime+runtime;
                        number_of_test=number_of_test+1;
                        number_of_test
                        
                    case 'SAGRADAFAMILIA3D'
                        NA = G1.Nodes;
                        NB = G2.Nodes;
                        EA = G1.Edges;
                        EB = G2.Edges;

                        KV = 0.05;
                        KE = 0.05;

                        tic
                        [~,automaticMapping] = BP_Degree_Centrality_h(NA,NB,EA,EB,KV,KE);
                        errors(end + 1) = 1-(length(find(automaticMapping - idealMapping) ~= 0) / length(automaticMapping));    
                        runtime=toc;
                        runtime
                        total_runtime=total_runtime+runtime;
                        number_of_test=number_of_test+1;
                        number_of_test
                        
                    case 'PALMPRINT'
                        NA = G1.Nodes;
                        NB = G2.Nodes;
                        EA = G1.Edges;
                        EB = G2.Edges;

                        KV = 210;
                        KE = 5;
                        
                        tic
                        [~,automaticMapping] = BP_Degree_Centrality_jv_Palmprint(NA,NB,EA,EB,KV,KE);
                        errors(end + 1) = 1-(length(find(automaticMapping - idealMapping) ~= 0) / length(automaticMapping));
                        runtime=toc;
                        runtime
                        total_runtime=total_runtime+runtime;
                        number_of_test=number_of_test+1;
                        number_of_test
                        
                    case 'ROTATIONZOOM'
                        NA = G1.Nodes(:,3:66);
                        NB = G2.Nodes(:,3:66);
                        EA = G1.Edges;
                        EB = G2.Edges;

                        KV = 0.0325;
                        KE = -0.0027;

                        tic
                        [~,automaticMapping] = BP_Degree_Centrality_h_RotationZoom(NA,NB,EA,EB,KV,KE);
                        errors(end + 1) = 1-(length(find(automaticMapping - idealMapping) ~= 0) / length(automaticMapping));                   
                        runtime=toc;
                        runtime
                        total_runtime=total_runtime+runtime;
                        number_of_test=number_of_test+1;
                        number_of_test
                        
                    otherwise
                        error('Unexpected database name.');
                end
            end            
            mean(errors)
        end
    end
    
%     save Database Database;
    average_hamming = mean(errors);
    average_runtime=total_runtime/number_of_test;
end